#------------- first -------------#

这是来自《Practical Rails Social Networking Sites》 - 《Ruby on Rails社区网站开发》
书中的源码 作者用的是版本是2.0左右的 现在Rails已经升级到2.3.3版本了

有些内容的改动还是蛮大的 比如

1 书中所讲的分页paginate已经被will_paginate所取代
  在controller中的调用要加类名 比如 Article.paginate

2 嵌套路由在views中的写法 
  <td>[<%= link_to 'edit permissions', user_roles_url(user) %>]</td>
  书中用的是 roles_url
  
3 RedCloth的安装后的调用 是在/config/environment.rb中添加  config.gem "RedCloth"

#------------- 待解决问题 -------------#
4.5.2 为API添加HTTP验证


###########
BBS功能
###########
计数器缓存  比如显示指定讨论区下主题的总数 会在topics-per-forum posts-per-topic计数器中使用计数器缓存
在数据表中对应的字段是 topics_count posts_count

资源嵌套 主题资源tpoic嵌套在论坛资源forum下  帖子资源post嵌套在主题资源topic下


#--------------git---------------#
    ### 新建工作分支 ###

    $ git checkout -b email_activation

       或者

    $ git branch email_activation
    $ git checkout email_activation

    查看当前工作所在的分支，

    $ git branch
    
    
   ### 提交工作成果到GIT仓库 ###

    $ cd ~/code/user_demo
    $ git init
    $ git add .
    $ git commit -m "A user can be able to sign up."
    $ git tag v1
   
   如果你当前的工作目录（working tree）已经混乱不堪，但是还没有提交，可以使用：

    $ git reset --hard

    这会丢弃所有的改变，包括去除已经加到git index里边的内容；然后将 working tree 和 index 恢复到上次commit时的状态。

    如果想回滚到一个指定的版本，就需要指定版本号：

    $ git reset --hard v1
  
  还有，记得 --hard 选项要慎重使用，具体的您可以使用 “git reset -h” 命令查阅更多关于撤销修改的详细信息。

    如果只是想放弃对某一文件的修改，可以使用 checkout 命令。这个命令不单用于分支间的切换，还可以回滚一个指定的文件内容到上次所做的修改，例如：

    $ git checkout app/models/user.rb

      这会放弃对user.rb所做的修改，并将user.rb的内容从上一个已提交的版本中更新回来。当然还可以指定回滚到指定版本，例如：

    $ git checkout v1 app/models/user.rb
    
    /* 正常使用 */
    woody@Woody:~/git_code/ruby$ git checkout email

	Switched to branch "email"

	woody@Woody:~/git_code/ruby$ git branch

	* email

	master
	
	分支上的开发工作已经顺利完成，可以将工作成果归并到主干中去了。


    ### 提交工作成果到GIT仓库 ###

    $ git add .
    $ git commit -m "People can activation their accounts by the confirm emails."
    $ git checkout master
    $ git merge email_activation
    $ git branch -d email_activation
    $ git tag v2  


user_roles GET    /users/:user_id/roles(.:format)                      {:controller=>"roles", :action=>"index"}
POST   /users/:user_id/roles(.:format)                      {:controller=>"roles", :action=>"create"}
new_user_role GET    /users/:user_id/roles/new(.:format)                  {:controller=>"roles", :action=>"new"}
edit_user_role GET    /users/:user_id/roles/:id/edit(.:format)             {:controller=>"roles", :action=>"edit"}
user_role GET    /users/:user_id/roles/:id(.:format)                  {:controller=>"roles", :action=>"show"}
PUT    /users/:user_id/roles/:id(.:format)                  {:controller=>"roles", :action=>"update"}
DELETE /users/:user_id/roles/:id(.:format)                  {:controller=>"roles", :action=>"destroy"}

